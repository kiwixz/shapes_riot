on: [pull_request, push]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build_type: ["Debug", "Release"]
        cxx: ["clang++", "g++"]
    runs-on: ubuntu-latest
    container:
      image: kiwixz/ci-cpp:2020-01-05
    steps:
      - name: Install system dependencies
        run: |
          pacman --color=always --needed --noconfirm -Sy  \
              git openssh  \
              clang cmake gcc lld nasm ninja python  \
              libxcursor libxi libxinerama libxrandr  `# glfw`

      - name: Dump packages versions
        run: |
          pacman --color=always -Q

      - name: Checkout
        run: |
          git clone "https://github.com/${{ github.repository }}" "./"
          git checkout "${{ github.sha }}"

      - name: Configure
        env:
          CXXFLAGS: -fdiagnostics-color=always
          LDFLAGS: -fdiagnostics-color=always
        run: |
          export "CXX=${{ matrix.cxx }}"
          if [[ "${{ matrix.cxx }}" == "clang++" ]]; then
            export "CC=clang"
          elif [[ "${{ matrix.cxx }}" == "g++" ]]; then
            export "CC=gcc"
          fi
          cmake -G Ninja -D "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" -S "." -B "build"

      - name: Build
        run: |
          ninja -C "build"

      - name: Test
        env:
          ASAN_OPTIONS: check_initialization_order=1:detect_stack_use_after_return=1
          UBSAN_OPTIONS: print_stacktrace=1
        run: |
          cd "build"
          ctest --verbose


  build_windows:
    strategy:
      fail-fast: false
      matrix:
        build_type: ["Debug", "Release"]
        cxx: ["cl", "clang++"]
    runs-on: windows-latest
    env:
      VCVARS: "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvars64.bat"
    steps:
      - name: Install system dependencies
        shell: cmd
        run: |
          choco install nasm
          if "${{ matrix.cxx }}"=="clang++" (
            choco install llvm
          )

      - name: Checkout
        shell: cmd
        run: |
          git clone "https://github.com/${{ github.repository }}" "."
          git checkout "${{ github.sha }}"

      - name: Patch
        run: |
          (Get-Content "cmake/set_defaults.cmake") -replace "-flto=thin", "" | Set-Content "cmake/set_defaults.cmake"

      - name: Configure
        shell: cmd
        run: |
          call "%VCVARS%"
          set "CXX=${{ matrix.cxx }}"
          if "${{ matrix.cxx }}"=="cl" (
            set "CC=cl"
          )
          if "${{ matrix.cxx }}"=="clang++" (
            set "PATH=C:\\Program Files\\LLVM\\bin;%PATH%"
            set "CC=clang"
          )
          cmake -G Ninja -D "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" -S "." -B "build"

      - name: Build
        shell: cmd
        run: |
          call "%VCVARS%"
          ninja -C "build"

      - name: Test
        shell: cmd
        run: |
          call "%VCVARS%"
          cd "build"
          if "${{ matrix.cxx }}"=="clang++" (
            set "PATH=C:\\Program Files\\LLVM\\bin;%PATH%"
            ctest --verbose
          ) else (
            ctest --verbose -E "check_clang_.*"
          )


  build_debian:
    strategy:
      fail-fast: false
      matrix:
        build_type: ["Debug", "Release"]
        cxx: ["clang++", "g++"]
    runs-on: ubuntu-latest
    container:
      image: debian:buster-slim
    steps:
      - name: Install system dependencies
        run: |
          apt update
          apt -y full-upgrade
          apt -y install  \
              git openssh-client  \
              cmake gcc nasm ninja-build python3  \
              libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev  `# glfw`
          apt -y install curl gnupg
          curl "https://apt.llvm.org/llvm-snapshot.gpg.key" | apt-key add -
          echo "deb https://apt.llvm.org/buster llvm-toolchain-buster main" > "/etc/apt/sources.list.d/llvm.list"
          apt update
          apt -y install clang clang-format clang-tidy lld

      - name: Dump packages versions
        run: |
          apt list --installed

      - name: Checkout
        run: |
          git clone "https://github.com/${{ github.repository }}" "./"
          git checkout "${{ github.sha }}"

      - name: Configure
        env:
          CXXFLAGS: -fdiagnostics-color=always
          LDFLAGS: -fdiagnostics-color=always
        run: |
          export "CXX=${{ matrix.cxx }}"
          if [[ "${{ matrix.cxx }}" == "clang++" ]]; then
            export "CC=clang"
          elif [[ "${{ matrix.cxx }}" == "g++" ]]; then
            export "CC=gcc"
          fi
          cmake -G Ninja -D "CMAKE_BUILD_TYPE=${{ matrix.build_type }}" -S "." -B "build"

      - name: Build
        run: |
          ninja -C "build"

      - name: Test
        env:
          ASAN_OPTIONS: check_initialization_order=1:detect_stack_use_after_return=1
          UBSAN_OPTIONS: print_stacktrace=1
        run: |
          cd "build"
          ctest --verbose -E "check_clang_tidy"
          ctest --verbose -R "check_clang_tidy" || :
